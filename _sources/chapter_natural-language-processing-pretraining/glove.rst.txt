
.. _sec_glove:

Word Embedding with Global Vectors (GloVe)
==========================================


Word-word co-occurrences within context windows may carry rich semantic
information. For example, in a large corpus word “solid” is more likely
to co-occur with “ice” than “steam”, but word “gas” probably co-occurs
with “steam” more frequently than “ice”. Besides, global corpus
statistics of such co-occurrences can be precomputed: this can lead to
more efficient training. To leverage statistical information in the
entire corpus for word embedding, let’s first revisit the skip-gram
model in :numref:`subsec_skip-gram`, but interpreting it using global
corpus statistics such as co-occurrence counts.

.. _subsec_skipgram-global:

Skip-Gram with Global Corpus Statistics
---------------------------------------


Denoting by :math:`q_{ij}` the conditional probability
:math:`P(w_j\mid w_i)` of word :math:`w_j` given word :math:`w_i` in the
skip-gram model, we have

.. math:: q_{ij}=\frac{\exp(\mathbf{u}_j^\top \mathbf{v}_i)}{ \sum_{k \in \mathcal{V}} \exp(\mathbf{u}_k^\top \mathbf{v}_i)},

where for any index :math:`i` vectors :math:`\mathbf{v}_i` and
:math:`\mathbf{u}_i` represent word :math:`w_i` as the center word and
context word, respectively, and
:math:`\mathcal{V} = \{0, 1, \ldots, |\mathcal{V}|-1\}` is the index set
of the vocabulary.

Consider word :math:`w_i` that may occur multiple times in the corpus.
In the entire corpus, all the context words wherever :math:`w_i` is
taken as their center word form a *multiset* :math:`\mathcal{C}_i` of
word indices that *allows for multiple instances of the same element*.
For any element, its number of instances is called its *multiplicity*.
To illustrate with an example, suppose that word :math:`w_i` occurs
twice in the corpus and indices of the context words that take
:math:`w_i` as their center word in the two context windows are
:math:`k, j, m, k` and :math:`k, l, k, j`. Thus, multiset
:math:`\mathcal{C}_i = \{j, j, k, k, k, k, l, m\}`, where multiplicities
of elements :math:`j, k, l, m` are 2, 4, 1, 1, respectively.

Now let’s denote the multiplicity of element :math:`j` in multiset
:math:`\mathcal{C}_i` as :math:`x_{ij}`. This is the global
co-occurrence count of word :math:`w_j` (as the context word) and word
:math:`w_i` (as the center word) in the same context window in the
entire corpus. Using such global corpus statistics, the loss function of
the skip-gram model is equivalent to

.. math:: -\sum_{i\in\mathcal{V}}\sum_{j\in\mathcal{V}} x_{ij} \log\,q_{ij}.
   :label: eq_skipgram-x_ij

We further denote by :math:`x_i` the number of all the context words in
the context windows where :math:`w_i` occurs as their center word, which
is equivalent to :math:`|\mathcal{C}_i|`. Letting :math:`p_{ij}` be the
conditional probability :math:`x_{ij}/x_i` for generating context word
:math:`w_j` given center word :math:`w_i`, :eq:`eq_skipgram-x_ij`
can be rewritten as

.. math:: -\sum_{i\in\mathcal{V}} x_i \sum_{j\in\mathcal{V}} p_{ij} \log\,q_{ij}.
   :label: eq_skipgram-p_ij

In :eq:`eq_skipgram-p_ij`,
:math:`-\sum_{j\in\mathcal{V}} p_{ij} \log\,q_{ij}` calculates the
cross-entropy of the conditional distribution :math:`p_{ij}` of global
corpus statistics and the conditional distribution :math:`q_{ij}` of
model predictions. This loss is also weighted by :math:`x_i` as
explained above. Minimizing the loss function in
:eq:`eq_skipgram-p_ij` will allow the predicted conditional
distribution to get close to the conditional distribution from the
global corpus statistics.

Though being commonly used for measuring the distance between
probability distributions, the cross-entropy loss function may not be a
good choice here. On the one hand, as we mentioned in
:numref:`sec_approx_train`, the cost of properly normalizing
:math:`q_{ij}` results in the sum over the entire vocabulary, which can
be computationally expensive. On the other hand, a large number of rare
events from a large corpus are often modeled by the cross-entropy loss
to be assigned with too much weight.

The GloVe Model
---------------

In view of this, the *GloVe* model makes three changes to the skip-gram
model based on squared loss :cite:`Pennington.Socher.Manning.2014`:

1. Use variables :math:`p'_{ij}=x_{ij}` and
   :math:`q'_{ij}=\exp(\mathbf{u}_j^\top \mathbf{v}_i)` that are not
   probability distributions and take the logarithm of both, so the
   squared loss term is
   :math:`\left(\log\,p'_{ij} - \log\,q'_{ij}\right)^2 = \left(\mathbf{u}_j^\top \mathbf{v}_i - \log\,x_{ij}\right)^2`.
2. Add two scalar model parameters for each word :math:`w_i`: the center
   word bias :math:`b_i` and the context word bias :math:`c_i`.
3. Replace the weight of each loss term with the weight function
   :math:`h(x_{ij})`, where :math:`h(x)` is increasing in the interval
   of :math:`[0, 1]`.

Putting all things together, training GloVe is to minimize the following
loss function:

.. math:: \sum_{i\in\mathcal{V}} \sum_{j\in\mathcal{V}} h(x_{ij}) \left(\mathbf{u}_j^\top \mathbf{v}_i + b_i + c_j - \log\,x_{ij}\right)^2.
   :label: eq_glove-loss

For the weight function, a suggested choice is:
:math:`h(x) = (x/c) ^\alpha` (e.g :math:`\alpha = 0.75`) if
:math:`x < c` (e.g., :math:`c = 100`); otherwise :math:`h(x) = 1`. In
this case, because :math:`h(0)=0`, the squared loss term for any
:math:`x_{ij}=0` can be omitted for computational efficiency. For
example, when using minibatch stochastic gradient descent for training,
at each iteration we randomly sample a minibatch of *non-zero*
:math:`x_{ij}` to calculate gradients and update the model parameters.
Note that these non-zero :math:`x_{ij}` are precomputed global corpus
statistics; thus, the model is called GloVe for *Global Vectors*.

It should be emphasized that if word :math:`w_i` appears in the context
window of word :math:`w_j`, then *vice versa*. Therefore,
:math:`x_{ij}=x_{ji}`. Unlike word2vec that fits the asymmetric
conditional probability :math:`p_{ij}`, GloVe fits the symmetric
:math:`\log \, x_{ij}`. Therefore, the center word vector and the
context word vector of any word are mathematically equivalent in the
GloVe model. However in practice, owing to different initialization
values, the same word may still get different values in these two
vectors after training: GloVe sums them up as the output vector.

Interpreting GloVe from the Ratio of Co-occurrence Probabilities
----------------------------------------------------------------

We can also interpret the GloVe model from another perspective. Using
the same notation in :numref:`subsec_skipgram-global`, let
:math:`p_{ij} \stackrel{\textrm{def}}{=} P(w_j \mid w_i)` be the
conditional probability of generating the context word :math:`w_j` given
:math:`w_i` as the center word in the corpus. :numref:`tab_glove`
lists several co-occurrence probabilities given words “ice” and “steam”
and their ratios based on statistics from a large corpus.

:Word-word co-occurrence probabilities and their ratios from a large
corpus (adapted from Table 1 in
:cite:t:`Pennington.Socher.Manning.2014`)

.. table:: label:``tab_glove``

   ==================================== ======== ======== ====== ========
   :math:`w_k`\ =                       solid    gas      water  fashion
   ==================================== ======== ======== ====== ========
   :math:`p_1=P(w_k\mid \textrm{ice})`  0.00019  0.000066 0.003  0.000017
   :math:`p_2=P(w_k\mid\textrm{steam})` 0.000022 0.00078  0.0022 0.000018
   :math:`p_1/p_2`                      8.9      0.085    1.36   0.96
   ==================================== ======== ======== ====== ========

We can observe the following from :numref:`tab_glove`:

-  For a word :math:`w_k` that is related to “ice” but unrelated to
   “steam”, such as :math:`w_k=\textrm{solid}`, we expect a larger ratio
   of co-occurence probabilities, such as 8.9.
-  For a word :math:`w_k` that is related to “steam” but unrelated to
   “ice”, such as :math:`w_k=\textrm{gas}`, we expect a smaller ratio of
   co-occurence probabilities, such as 0.085.
-  For a word :math:`w_k` that is related to both “ice” and “steam”,
   such as :math:`w_k=\textrm{water}`, we expect a ratio of co-occurence
   probabilities that is close to 1, such as 1.36.
-  For a word :math:`w_k` that is unrelated to both “ice” and “steam”,
   such as :math:`w_k=\textrm{fashion}`, we expect a ratio of
   co-occurence probabilities that is close to 1, such as 0.96.

It can be seen that the ratio of co-occurrence probabilities can
intuitively express the relationship between words. Thus, we can design
a function of three word vectors to fit this ratio. For the ratio of
co-occurrence probabilities :math:`{p_{ij}}/{p_{ik}}` with :math:`w_i`
being the center word and :math:`w_j` and :math:`w_k` being the context
words, we want to fit this ratio using some function :math:`f`:

.. math:: f(\mathbf{u}_j, \mathbf{u}_k, {\mathbf{v}}_i) \approx \frac{p_{ij}}{p_{ik}}.
   :label: eq_glove-f

Among many possible designs for :math:`f`, we only pick a reasonable
choice in the following. Since the ratio of co-occurrence probabilities
is a scalar, we require that :math:`f` be a scalar function, such as
:math:`f(\mathbf{u}_j, \mathbf{u}_k, {\mathbf{v}}_i) = f\left((\mathbf{u}_j - \mathbf{u}_k)^\top {\mathbf{v}}_i\right)`.
Switching word indices :math:`j` and :math:`k` in :eq:`eq_glove-f`,
it must hold that :math:`f(x)f(-x)=1`, so one possibility is
:math:`f(x)=\exp(x)`, i.e.,

.. math:: f(\mathbf{u}_j, \mathbf{u}_k, {\mathbf{v}}_i) = \frac{\exp\left(\mathbf{u}_j^\top {\mathbf{v}}_i\right)}{\exp\left(\mathbf{u}_k^\top {\mathbf{v}}_i\right)} \approx \frac{p_{ij}}{p_{ik}}.

Now let’s pick
:math:`\exp\left(\mathbf{u}_j^\top {\mathbf{v}}_i\right) \approx \alpha p_{ij}`,
where :math:`\alpha` is a constant. Since :math:`p_{ij}=x_{ij}/x_i`,
after taking the logarithm on both sides we get
:math:`\mathbf{u}_j^\top {\mathbf{v}}_i \approx \log\,\alpha + \log\,x_{ij} - \log\,x_i`.
We may use additional bias terms to fit
:math:`- \log\, \alpha + \log\, x_i`, such as the center word bias
:math:`b_i` and the context word bias :math:`c_j`:

.. math:: \mathbf{u}_j^\top \mathbf{v}_i + b_i + c_j \approx \log\, x_{ij}.
   :label: eq_glove-square

Measuring the squared error of :eq:`eq_glove-square` with weights,
the GloVe loss function in :eq:`eq_glove-loss` is obtained.

Summary
-------

-  The skip-gram model can be interpreted using global corpus statistics
   such as word-word co-occurrence counts.
-  The cross-entropy loss may not be a good choice for measuring the
   difference of two probability distributions, especially for a large
   corpus. GloVe uses squared loss to fit precomputed global corpus
   statistics.
-  The center word vector and the context word vector are mathematically
   equivalent for any word in GloVe.
-  GloVe can be interpreted from the ratio of word-word co-occurrence
   probabilities.

Exercises
---------

1. If words :math:`w_i` and :math:`w_j` co-occur in the same context
   window, how can we use their distance in the text sequence to
   redesign the method for calculating the conditional probability
   :math:`p_{ij}`? Hint: see Section 4.2 of the GloVe paper
   :cite:`Pennington.Socher.Manning.2014`.
2. For any word, are its center word bias and context word bias
   mathematically equivalent in GloVe? Why?

`Discussions <https://discuss.d2l.ai/t/385>`__
